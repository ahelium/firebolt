// Code generated by mockery v1.0.0. DO NOT EDIT.
package kafkaproducer

import kafka "github.com/confluentinc/confluent-kafka-go/kafka"
import mock "github.com/stretchr/testify/mock"

// MockMessageProducer is an autogenerated mock type for the MessageProducer type
type MockMessageProducer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockMessageProducer) Close() {
	_m.Called()
}

// Events provides a mock function with given fields:
func (_m *MockMessageProducer) Events() chan kafka.Event {
	ret := _m.Called()

	var r0 chan kafka.Event
	if rf, ok := ret.Get(0).(func() chan kafka.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan kafka.Event)
		}
	}

	return r0
}

// Flush provides a mock function with given fields: timeoutMs
func (_m *MockMessageProducer) Flush(timeoutMs int) int {
	ret := _m.Called(timeoutMs)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(timeoutMs)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ProduceChannel provides a mock function with given fields:
func (_m *MockMessageProducer) ProduceChannel() chan *kafka.Message {
	ret := _m.Called()

	var r0 chan *kafka.Message
	if rf, ok := ret.Get(0).(func() chan *kafka.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *kafka.Message)
		}
	}

	return r0
}
